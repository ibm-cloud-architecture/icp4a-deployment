- hosts: nfs
  remote_user: root
  tasks:
    - name: Init NFS Folders
      block:
      - name: Creates directory {{ pv_root_folder }}/CAM_db
        file:
          path: "{{ pv_root_folder }}/CAM_db"
          owner: '999'
          group: '999'
          mode: '2775'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_terraform
        file:
          path: "{{ pv_root_folder }}/CAM_terraform"
          owner: '1111'
          group: '1111'
          mode: '2775'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_terraform/cam-provider-terraform
        file:
          path: "{{ pv_root_folder }}/CAM_terraform/cam-provider-terraform"
          owner: '1111'
          group: '1111'
          mode: '2775'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_logs
        file:
          path: "{{ pv_root_folder }}/CAM_logs"
          owner: '1000'
          group: '1000'
          mode: '2775'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_logs/cam-provider-terraform
        file:
          path: "{{ pv_root_folder }}/CAM_logs/cam-provider-terraform"
          owner: '1111'
          group: '1111'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_BPD_appdata
        file:
          path: "{{ pv_root_folder }}/CAM_BPD_appdata"
          owner: '1000'
          group: '1000'
          mode: '2775'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_BPD_appdata/mysql
        file:
          path: "{{ pv_root_folder }}/CAM_BPD_appdata/mysql"
          owner: '999'
          group: '999'
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_BPD_appdata/repositories
        file:
          path: "{{ pv_root_folder }}/CAM_BPD_appdata/repositories"
          state: directory
      - name: Creates directory {{ pv_root_folder }}/CAM_BPD_appdata/workspace
        file:
          path: "{{ pv_root_folder }}/CAM_BPD_appdata/workspace"
          state: directory
      tags:
      - init_nfs

- hosts: boot
  remote_user: root
  tasks:
    - name: Install ICP CLI
      include: tasks/install-icp-cli.yaml
      tags:
      - install_cli

    - name: Checking if the Helm Chart is loaded
      shell: |
        status=$(curl -sk --head https://{{ icp_server }}/helm-repo/requiredAssets/ibm-cam-3.1.3.tgz | head -n 1)
        echo $status
      register: helm_chart_status
      run_once: true
      tags:
      - test_helm_chart

    - name: Load CAM Helm Chart
      command: cloudctl catalog load-archive --archive {{ cam_install_file }}
      when: helm_chart_status.stdout.find("404") != -1
      tags:
      - load_cam

    - name: Create Docker Pull Secret
      shell: |
        kubectl create secret docker-registry cam-docker-secret --docker-server={{ register_server }} --docker-username={{ admin_name }} --docker-password={{ admin_password }} -n services
        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "cam-docker-secret"}]}' --namespace=services
      ignore_errors: yes
      tags:
      - create_secret

    - name: Create PV in ICP
      block:
      - name: Prepare pv yaml from template
        template:
          src: templates/pv.yaml.j2
          dest: /root/pv.yaml
      - name: Create PV
        shell: |
          kubectl create -f /root/pv.yaml
      tags:
      - create_pv

    - name: Deploy CAM
      shell: |
        rm -rf /root/ibm-cam-3.1.3.tgz
        curl -kLo /root/ibm-cam-3.1.3.tgz  https://{{ icp_server }}/helm-repo/requiredAssets/ibm-cam-3.1.3.tgz
        helm install /root/ibm-cam-3.1.3.tgz --name {{ package_name }} --namespace services --set license=accept,global.iam.deployApiKey={{ api_key }},image.repository={{ register_server }}/services/,global.image.secretName=cam-docker-secret,auditService.image.repository={{ register_server }}/ibmcom/,auditService.image.pullSecret=cam-docker-secret --tls
      environment:
        HELM_HOME: /root/.helm
      tags:
      - deploy_cam
